{"version":3,"sources":["Todo/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","onChange","event","setState","userInput","target","value","onChangeEdit","userEditInput","addTodo","preventDefault","state","items","error","deleteTodo","array","index","parseInt","splice","editTodo","editButton","saveEditTodo","errorEdit","renderTodos","map","item","key","className","style","margin","onClick","marginTop","type","placeholder","role","errorMsg","duration","easing","this","length","align","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1ca5bfd3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport FlipMove from 'react-flip-move'\r\nimport './TodoList.css'\r\nimport { useForm } from \"react-hook-form\"\r\n\r\n\r\nclass TodoList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userInput: '',\r\n      userEditInput: '',\r\n      items: [],\r\n      editButton: [false, 0],\r\n      errorMsg: 'Veuillez renseigner tout les champs !',\r\n      error: false,\r\n      errorEdit: false\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  onChange = (event) => {\r\n    this.setState({\r\n      userInput: event.target.value\r\n    })\r\n  }\r\n\r\n  onChangeEdit = (event) => {\r\n    this.setState({\r\n      userEditInput: event.target.value\r\n    })\r\n  }\r\n\r\n  addTodo = (event) => {\r\n    event.preventDefault()\r\n    if (this.state.userInput != null && this.state.userInput != '') {\r\n      this.setState({\r\n        items: [...this.state.items, this.state.userInput],\r\n        userInput: ''\r\n      })\r\n      this.setState({ error: false })\r\n\r\n    }\r\n    else {\r\n      this.setState({ error: true })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  deleteTodo = (event) => {\r\n    event.preventDefault()\r\n\r\n    const array = this.state.items\r\n    const index = parseInt(event.target.value)\r\n    array.splice(index, 1)\r\n    this.setState({\r\n      items: array\r\n    })\r\n  }\r\n\r\n  editTodo = (event) => {\r\n    event.preventDefault()\r\n    this.setState({ editButton: [!this.state.editButton[0], parseInt(event.target.value)] })\r\n  }\r\n\r\n  saveEditTodo = (event) => {\r\n    event.preventDefault()\r\n    if (this.state.userEditInput != null && this.state.userEditInput != '') {\r\n\r\n      let index = parseInt(event.target.value)\r\n      let array = this.state.items\r\n      array[index] = this.state.userEditInput\r\n      this.setState({\r\n        items: array,\r\n        userEditInput: ''\r\n      })\r\n      this.setState({ editButton: [false, 0] })\r\n      this.setState({ errorEdit: false })\r\n    } else {\r\n      this.setState({ errorEdit: true })\r\n    }\r\n\r\n  }\r\n\r\n\r\n  renderTodos = () => {\r\n    return this.state.items.map((item, index) => {\r\n\r\n      return (\r\n        <div key={index}>\r\n          <li className=\"list-group-item\"\r\n            style={{ margin: '0.3em' }}> {item}\r\n            <button\r\n              value={index}\r\n              onClick={this.editTodo}\r\n              className=\"btn btn-info\"\r\n              style={{ margin: '0.3em' }}>\r\n              ‚úèÔ∏è</button>\r\n            <button\r\n              onClick={this.deleteTodo}\r\n              value={index}\r\n              className=\"btn btn-danger\">üóëÔ∏è</button>\r\n\r\n            {\r\n              this.state.editButton[0] === true && this.state.editButton[1] === index ?\r\n\r\n                <div style={{ marginTop: '5px' }} className=\"input-group mb-3\"\r\n                >\r\n                  <input\r\n\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder=\"Modifier la t√¢che\"\r\n                    value={this.state.userEditInput}\r\n                    onChange={this.onChangeEdit} />\r\n                  <button\r\n                    value={index}\r\n                    className=\"btn btn-info\"\r\n                    onClick={this.saveEditTodo}>\r\n                    Modifier\r\n              </button>\r\n\r\n                </div>\r\n                : null\r\n            }\r\n            {\r\n              this.state.errorEdit && <div className=\"alert alert-danger\" role=\"alert\">{this.state.errorMsg}</div>\r\n            }\r\n\r\n          </li >\r\n        </div>\r\n      )\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"text-center display-1\" style={{ marginTop: '5%' }} >Todo list</h1>\r\n\r\n        <div className=\"todoListContainer\">\r\n\r\n          <ul className=\"list-group \">\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n              {\r\n                this.state.items.length === 0 ? <div align='center' className=\"alert alert-secondary\">Vous avez aucune t√¢ches</div> : this.renderTodos()\r\n              }\r\n            </FlipMove>\r\n          </ul>\r\n\r\n        </div>\r\n\r\n\r\n        <form >\r\n          <div className=\"form-group\">\r\n            <div className=\"input-group mb-3\">\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                placeholder=\"Ajouter une t√¢che\"\r\n                value={this.state.userInput}\r\n                onChange={this.onChange}\r\n              />\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                onClick={this.addTodo}>\r\n                Ajouter\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {\r\n            this.state.error && <div className=\"alert alert-danger\" role=\"alert\">{this.state.errorMsg}</div>\r\n          }\r\n\r\n        </form>\r\n\r\n\r\n      </div >\r\n\r\n\r\n\r\n    )\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nexport default TodoList\r\n\r\n\r\n\r\n","import React from 'react'\nimport './App.css'\nimport TodoList from './Todo/TodoList';\n\nfunction App() {\n  return (\n    <TodoList />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}